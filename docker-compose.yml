version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "${REDIS_EXTERNAL_PORT}:${REDIS_EXTERNAL_PORT}"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      - app_network
    env_file:
      - config/.env.dump

  django:
    container_name: djangologger-container-v1
    build:
      context: .
    env_file:
      - config/.env.dump
    networks:
      - app_network
    depends_on:
      - redis
    command: python manage.py runserver 0.0.0.0:8000  # in container
    expose:
      - "8000"  # in docker network

  nginx:
    build:
      context: nginx
    container_name: nginx-container
    ports:
      - "80:80"
    volumes:
      - ./nginx/staticfiles:/nginx/staticfiles
    depends_on:
      - django
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    expose:
      - '5672'
    env_file:
      - config/.env.dump
    environment:
      RABBITMQ_DEFAULT_USER: "${RMQ_USERNAME}"
      RABBITMQ_DEFAULT_PASS: "${RMQ_PASSWORD}"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - redis
    networks:
      - app_network

  ip_deanon_service:
    build:
      context: services/go_services/ip_deanonymizer
    container_name: go-ip-deanon-container
    env_file:
      - config/.env.dump
    networks:
      - app_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    expose:
      - "8080"
    command: ["./ip_deanon_service"]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  redis_data:

networks:
  app_network:
    driver: bridge